#PBS -N mass_retrieve_V2_${PBS_ARRAYID}
#PBS -l walltime=10:00:00,nodes=1:ppn=1,mem=10gb
#PBS -V

#   ReprDB compilation pipeline
#   Copyright (C) 2017 Nicole Gay

#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Throughout this script, there are while loops with an $ITER max iteration condition of 5. This is to make 5 attempts of downloading a file before giving up because I frequently see Entrez errorring out even when it's very possible to fetch a file for that accession

cd ${outdir}

# Try not to overload the Entrez server
a=1
while [ "$a" -lt "${PBS_ARRAYID}" ]
do
	sleep 0.2
	a=$(( a + 1 ))
done
 
touch all_lengths_${PBS_ARRAYID}.txt
touch failed_downloads_${PBS_ARRAYID}.txt
 
for g in `cat GenBankAcc_${PBS_ARRAYID}` # called GenBankAcc by python script, but really organism names
do

	# Reset variables
	ERROR=0
	NEW_HEAD=null
	COUNT=null
	CHECK=null
	GENOME_LENGTH=null
	NAME=null

	NAME=`echo $g | sed 's/_/ /g'`
	esearch -db nuccore -query "$NAME[ORGN]" | efetch -format fasta > $g.fasta
	sleep 5
	COUNT=`wc -w < $g.fasta | sed 's/^ *//' | sed 's/ .*//'`
	if [ "$COUNT" -lt 2 ]
	then 
		ERROR=1
		printf "Species $NAME failed to compile FASTA\n" >> failed_downloads_${PBS_ARRAYID}.txt
		rm $g.fasta
	else
		awk '!/^>/ { printf "%s", $0; n = "\n" } /^>/ { print n $0; n = "" } END { printf "%s", n }' $g.fasta > tmp.$g.nolines.fasta	
		head -1 $g.fasta > new$g.fasta
		sed '/^$/d' tmp.$g.nolines.fasta | grep -h -v ">" | perl -pe 's/\n/NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN/' >> new$g.fasta
		echo >> new$g.fasta
		rm $g.fasta
		rm tmp.$g.nolines.fasta
		HEAD=`head -1 new$g.fasta`
		VAL=`echo $HEAD | grep -c "|gb|"`
		ACCN=`echo $HEAD | cut -f4 -d'|'`
		mv new$g.fasta $ACCN.fasta
		COUNT=`sed '1d' $ACCN.fasta | wc -c | sed 's/^ *//' | sed 's/ .*//'`
		if [ "$COUNT" -lt 2 ]
		then
			ERROR=1
			printf "Species $NAME fetched a blank genome\n" >> failed_downloads_${PBS_ARRAYID}.txt
			rm $ACCN.fasta	
		else 
			printf "$ACCN\n" >> accessions_${PBS_ARRAYID}.txt
			mv $ACCN.fasta _interim #move .fasta file to _interim
		fi
	fi
done
#OUTPUTS: fasta files with wrong headers in _interim and a list of accessions in PWD

#=========================================================================================

# Compiling lineage strings for every accession...

INC=0
printf "" > headers.txt

for y in `cat accessions_${PBS_ARRAYID}.txt`
do	
	esearch -db nuccore -query "$y[ACCN]" | efetch -format gp | head -50 > ${PBS_ARRAYID}.info
	sleep 5
	COUNT=`wc -c < ${PBS_ARRAYID}.info | sed 's/^ *//' | sed 's/ .*//'`
	if [ "$COUNT" -lt 2 ]
	then 
		ERROR=1
		rm ${PBS_ARRAYID}.info
		printf "GenBank Accession $y failed to fetch XML file\n" >> failed_downloads_${PBS_ARRAYID}.txt
	else	
		sed '/REFERENCE/,$d' ${PBS_ARRAYID}.info | sed -e '1,/SOURCE/d' -e 's/^ *//' > ${PBS_ARRAYID}.org_messy
		if [ `grep -n ORGANISM ${PBS_ARRAYID}.org_messy | cut -c1` != "1" ]
		then
			sed '1d' ${PBS_ARRAYID}.org_messy > ${PBS_ARRAYID}.tmp
			rm ${PBS_ARRAYID}.org_messy
			mv ${PBS_ARRAYID}.tmp ${PBS_ARRAYID}.org_messy
		fi	
		head -1 ${PBS_ARRAYID}.org_messy | sed -e 's/ORGANISM//' -e 's/^ *//' > ${PBS_ARRAYID}.sm_string # species name
		sed '1d' ${PBS_ARRAYID}.org_messy | tr -d '\n' | sed -e 's/; /;/g' -e 's/\./;/' > ${PBS_ARRAYID}.tight
		cat ${PBS_ARRAYID}.sm_string >> ${PBS_ARRAYID}.tight
		tr -d '\n' < ${PBS_ARRAYID}.tight | sed 's/ /_/g' | sed "s/'//g" | sed 's/;_/:/g' > ${PBS_ARRAYID}_lineage.txt # lineage string
		
		LINEAGE=`cat ${PBS_ARRAYID}_lineage.txt`
		
		printf ">ACCN:$y|$LINEAGE\n" >> headers.txt
		rm -f ${PBS_ARRAYID}.info ${PBS_ARRAYID}.org_messy ${PBS_ARRAYID}.sm_string ${PBS_ARRAYID}.tight	
	fi
done

#OUTPUTS: headers for all accessions, complete with lineage string (headers.txt)

#=========================================================================================

# Reheading fasta files and compiling all_lengths_${PBS_ARRAYID}.txt...

for q in `ls _interim/*.fasta`
do
	ACCN=`echo $q | sed 's/_interim\///' | sed 's/\.fasta//'`
	NEW_HEAD=`grep $ACCN headers.txt` # fetch correct header from 
	GENOME_LENGTH=`sed '1d' $q | sed 's/N//' | wc -c` # determine genome length
	if [ "$GENOME_LENGTH" -lt 2 ]
	then 
		ERROR=1
		printf "GenBank Accession $ACCN failed to compile FASTA\n" >> failed_downloads_${PBS_ARRAYID}.txt
		rm -f $q
	else
		printf ">ACCN:$n|$NEW_HEAD\t$GENOME_LENGTH\n" >> all_lengths_${PBS_ARRAYID}.txt #add lineage string and genome length to all_lengths_${PBS_ARRAYID}.txt
		printf "$NEW_HEAD\n" > tmp.$ACCN.fasta
		sed '1d' $q >> tmp.$ACCN.fasta
		rm -f $q
		mv tmp.$ACCN.fasta $ACCN.fasta
		mv $ACCN.fasta _interim 
	fi
done

if [ $ERROR != "0" ]
then
	printf "Species $NAME generated errors. Associated files removed\n" >> failed_downloads_${PBS_ARRAYID}.txt
	rm -f $ACCN.fasta
	sed '/$ACCN/d' all_lengths_${PBS_ARRAYID}.txt > tmp.txt
	rm all_lengths_${PBS_ARRAYID}.txt
	mv tmp.txt all_lengths_${PBS_ARRAYID}.txt
fi

#OUTPUTS: reheaded fasta files and all_lengths_${PBS_ARRAYID}.txt

rm GenBankAcc_${PBS_ARRAYID}
rm accessions_${PBS_ARRAYID}.txt
rm ${PBS_ARRAYID}_lineage.txt
